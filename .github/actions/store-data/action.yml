name: Store Data

description: Runs the rJip CLI to pick a random item from the JSON, save it and handles the output.

inputs:
    data_json_file:
        description: "The JSON file to use as input"
        required: true
    last_picks_file:
        description: "The file to track the last picked items"
        required: true
    UTIL_BINARY_PATH:
        description: "The path to the rJip binary"
        required: true
    item_json_file:
        description: "The file to save the picked item"
        required: true
    json_comparison_property:
        description: "The property to compare in the JSON file"
        required: true

runs:
    using: "composite"
    steps:
        - run: |
              #!/bin/bash
              set -euxo pipefail  # Enable strict error handling

              run_util_command() {
                echo "Running util command..."
                cd $(dirname ${{ inputs.UTIL_BINARY_PATH }})
                if [ ! -f "./$(basename ${{ inputs.UTIL_BINARY_PATH }})" ]; then
                  echo "binary not found!"
                  exit 1
                fi
                command_output=$(./$(basename ${{ inputs.UTIL_BINARY_PATH }}) ../../${{ inputs.data_json_file }} ${{ inputs.json_comparison_property }} ../../${{ inputs.last_picks_file }} || true)
                echo "Command output: $command_output"
                cd ../..
                echo "$command_output" > command_output.json
                status=$(echo "$command_output" | jq -r '.status')
                echo "status=$status" >> $GITHUB_ENV
                echo "command_output=$command_output" >> $GITHUB_ENV
              }

              handle_success() {
                echo "Handling success..."
                item=$(echo "$command_output" | jq '.item')
                echo "$item" > ${{ inputs.item_json_file }}
                echo "${{ inputs.item_json_file }} has been saved."
                echo "commit_changes=true" >> $GITHUB_ENV
              }

              handle_error() {
                echo "Handling error..."
                error_code=$(echo "$command_output" | jq -r '.error_code')
                error_message=$(echo "$command_output" | jq -r '.message')
                case "$error_code" in
                    "invalid_or_nonexistent_json_file" | "empty_input_json_file" | "invalid_property_name" | "generic_error" | "")
                        echo "Error: $error_message"
                        exit 1
                        ;;
                    "all_items_picked")
                        echo "Error: All items have been picked and no new items are available. Message: $error_message"
                        if [ -f "${{ inputs.last_picks_file }}" ]; then
                            rm ${{ inputs.last_picks_file }}
                            run_util_command
                            if [ "$status" == "success" ]; then
                                handle_success
                            else
                                echo "Retry failed with status: $status"
                                exit 1
                            fi
                        else
                            echo "${{ inputs.last_picks_file }} not found in the root directory!"
                            exit 1
                        fi
                        ;;
                    *)
                        echo "Error: An unknown error occurred. Message: $error_message"
                        exit 1
                        ;;
                esac
              }

              run_util_command
              if [ "$status" == "success" ]; then
                handle_success
              elif [ "$status" == "error" ]; then
                handle_error
              else
                echo "Unknown status: $status"
                exit 1
              fi
          shell: bash
