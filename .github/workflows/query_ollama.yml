name: Install and Run Ollama

on:
    workflow_dispatch: # Allows running this workflow manually from the Actions tab

permissions:
    contents: read

jobs:
    run_ollama:
        runs-on: ubuntu-latest

        steps:
            - name: Install Ollama
              run: |
                  curl -fsSL https://ollama.com/install.sh | sh
              
            - name: Save Ollama version
              run: |
                  ollama --version > ollama_version.txt

            - name: Run Ollama server in the background
              run: |
                  nohup ollama serve & # Start Ollama server in the background
                  sleep 10 # Give it some time to start

            - name: Install Go
              run: |
                  sudo apt update
                  sudo apt install -y golang-go

            - name: Build Go script
              run: |
                  echo 'package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
)

type Response struct {
	Model     string `json:"model"`
	CreatedAt string `json:"created_at"`
	Response  string `json:"response"`
	Done      bool   `json:"done"`
}

func main() {
	url := "http://localhost:11434/api/generate"
	data := ` + "`" + `{
		"model": "llama3.1",
		"prompt": "Why is the sky blue? I want you to give a really short answer!"
	}` + "`" + `

	req, err := http.NewRequest("POST", url, bytes.NewBuffer([]byte(data)))
	if err != nil {
		fmt.Println("Error creating request:", err)
		os.Exit(1)
	}
	req.Header.Set("Content-Type", "application/json")

	// HTTP client with no timeout
	client := &http.Client{
		Timeout: 0, // No timeout
	}

	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("Error sending request:", err)
		os.Exit(1)
	}
	defer resp.Body.Close()

	decoder := json.NewDecoder(resp.Body)

	for {
		var r Response
		if err := decoder.Decode(&r); err == io.EOF {
			break
		} else if err != nil {
			fmt.Println("Error decoding response:", err)
			break
		}

		fmt.Print(r.Response)

		if r.Done {
			break
		}
	}
}' > generate_response.go
                  go build generate_response.go

            - name: Run Go script
              run: |
                  ./generate_response
